<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright © 2015-2026 the original author or authors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">
    <property name="severity" value="warning"/>
    <property name="charset" value="UTF-8"/>
    
    <!-- TreeWalker module checks -->
    <module name="TreeWalker">
        <property name="tabWidth" value="4"/>
        <!-- 在TreeWalker外层再配置<module name="SuppressWarningsFilter"/>，
                          可支持使用@SuppressWarnings()注解来过滤掉checkstyle检查 
                          参考:  http://checkstyle.sourceforge.net/config_filters.html#SuppressWarningsFilter
             https://stackoverflow.com/questions/27688426/ignoring-of-checkstyle-warnings-with-annotation-suppresswarnings
        -->
        <module name="SuppressWarningsHolder"/>
        <!-- 使得可以在类中使用注释： //CHECKSTYLE:OFF 关闭checkstyle检查
                                    //CHECKSTYLE:OFF: MagicNumber    关闭MagicNumber检查
                                    //CHECKSTYLE:OFF: checkstyle:magicnumber 关闭checkstyle:magicnumber检查      
                                    //CHECKSTYLE:ON  启动checkstyle检查
                          参考: http://checkstyle.sourceforge.net/config_filters.html#SuppressionCommentFilter
             https://stackoverflow.com/questions/4023185/how-to-disable-a-particular-checkstyle-rule-for-a-particular-line-of-code
        -->
        <!-- <module name="SuppressionCommentFilter">
            <property name="offCommentFormat" value="CHECKSTYLE.OFF\: ([\w\|]+)"/>
            <property name="onCommentFormat" value="CHECKSTYLE.ON\: ([\w\|]+)"/>
            <property name="checkFormat" value="$1"/>
        </module> -->
        <!-- 检查方法的javadoc的注释
            scope: 可以检查的方法的范围，例如：public只能检查public修饰的方法，private可以检查所有的方法
            allowMissingParamTags: 是否忽略对参数注释的检查
            allowMissingThrowsTags: 是否忽略对throws注释的检查
            allowMissingReturnTag: 是否忽略对return注释的检查 
         -->
        <module name="JavadocMethod">
            <property name="scope" value="protected"/>
            <property name="severity" value="error"/>
            <property name="allowUndeclaredRTE" value="true"/>
            <property name="allowMissingPropertyJavadoc" value="true"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
        </module>
        <!-- 检查类和接口的javadoc 默认不检查author 和version tags
           authorFormat: 检查author标签的格式
           versionFormat: 检查version标签的格式
           scope: 可以检查的类的范围，例如：public只能检查public修饰的类，private可以检查所有的类
           excludeScope: 不能检查的类的范围，例如：public，public的类将不被检查，但访问权限小于public的类仍然会检查，其他的权限以此类推
           tokens: 该属性适用的类型，例如：CLASS_DEF,INTERFACE_DEF 
         -->
        <module name="JavadocType">
            <property name="severity" value="error"/>
            <property name="scope" value="public"/>
            <property name="authorFormat" value="\w+"/>
            <property name="allowMissingParamTags" value="true"/>
        </module>
        <!-- 检查类变量的注释scope: 检查变量的范围，
                例如：public只能检查public修饰的变量，private可以检查所有的变量 
        -->
        <module name="JavadocVariable">
            <property name="severity" value="error"/>
            <property name="scope" value="protected"/>
            <property name="ignoreNamePattern" value="log|logger|LOG|LOGGER"/>
        </module>
        <!--javadoc 风格-->
        <!-- <module name="JavadocStyle">
            <property name="severity" value="error"/>
        </module> -->
        <!--类的分散复杂度检查，类依赖其他类的数量 default 20-->
        <module name="ClassFanOutComplexity">
            <property name="max" value="50"/>
            <property name="severity" value="error"/>
        </module>
        <!-- <module name="CommentsIndentation">
            <property name="severity" value="error"/>
        </module> -->
        <!-- 代码缩进   -->
        <!-- <module name="Indentation">
            <property name="severity" value="error"/>
        </module> -->
        <module name="CyclomaticComplexity">
            <property name="max" value="20"/>
            <property name="severity" value="error"/>
        </module>
        <!--switch 中default的位置检查，在所有case下面-->
        <module name="DefaultComesLast">
            <property name="severity" value="error"/>
        </module>
        <!-- 检查注解存在的位置
             allowSamelineMultipleAnnotations 是否允许同行存在多个注解 default false
             allowSamelineSingleParameterlessAnnotation 是否允许同行存在无参数的注解  default true
             allowSamelineParameterizedAnnotation 是否允许同行存在带参数的注解  default false
        -->
        <module name="AnnotationLocation">
            <property name="severity" value="error"/>
            <property name="allowSamelineSingleParameterlessAnnotation" value="false"/>
        </module>
        <!-- 常量命名  不能有小写字母，长度(0,29) -->
        <module name="ConstantName">
            <property name="severity" value="error"/>
        </module>
        <module name="GenericWhitespaceCheck">
            <property name="severity" value="error"/>
        </module>
        <!--循环控制变量不应在代码块中改变  如
             for (int i = 0; i < 1; i++) {
                     i++; //violation
                   }
           skipEnhancedForLoopVariable  是否检查foreach
        -->
        <module name="ModifiedControlVariable">
            <property name="severity" value="error"/>
        </module>
        <!--魔法数检查-->
        <module name="MagicNumber">
            <property name="ignoreAnnotation" value="true"/>
            <property name="ignoreHashCodeMethod" value="true"/>
            <property name="ignoreFieldDeclaration" value="true"/>
            <property name="severity" value="error"/>
        </module>
        <!-- local, final variables, including catch parameters -->
        <module name="LocalFinalVariableName">
            <property name="severity" value="error"/>
        </module>
        <!-- local, non-final variables, including catch parameters-->
        <module name="LocalVariableName">
            <property name="severity" value="error"/>
        </module>
        <!-- 确保抽象类的名称符合一些正则表达式。 -->
        <module name="AbstractClassName">
            <property name="ignoreModifier" value="true"/>
            <property name="severity" value="error"/>
            <property name="format" value="^Abstract.*$|^.*Factory$|^Base.*$|^Root.*$"/>
        </module>
        <!-- 成员变量命名  小写字母开头，长度(0,29) -->
        <module name="MemberName">
            <property name="severity" value="error"/>
        </module>
        <!-- 方法命名  小写字母开头，长度(0,29) -->
        <module name="MethodName">
            <property name="severity" value="error"/>
        </module>
        <module name="GenericWhitespace">
            <property name="severity" value="error"/>
        </module>
        <!-- 包命名  小写字母开头 -->
        <module name="PackageName">
            <property name="severity" value="error"/>
        </module>
        <!--catch 参数名称-->
        <module name="ParameterName">
            <property name="severity" value="error"/>
            <!-- <property name="ignoreOverridden" value="true" /> -->
        </module>
        <!-- 静态变量命名  不能有小写字母，长度(0,29) -->
        <module name="StaticVariableName">
            <property name="severity" value="error"/>
            <property name="format" value="(^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$)"/>
        </module>
        <!--名字简写检查，不能出现连续的大写字母个数 default 4不包括 static ，final，重写方法-->
        <module name="AbbreviationAsWordInName">
        	<property name="allowedAbbreviationLength" value="10"/>
        </module>
        <!-- 类，接口命名  大写字母开头，长度(0,29) -->
        <module name="TypeName">
            <property name="severity" value="error"/>
        </module>
        <!-- 必须导入类的完整路径，即不能使用*导入所需的类 -->
        <module name="AvoidStarImport">
            <property name="severity" value="error"/>
            <property name="excludes"
                      value="java.io,java.net,java.lang.Math,org.junit.Assert,org.mockito.Mockito,
                      org.mockito.Matchers,org.springframework.test.web.servlet.request.MockMvcRequestBuilders,
                      org.springframework.test.web.servlet.result.MockMvcResultMatchers,
                      java.nio.file.StandardWatchEventKinds"/>
            <property name="allowStaticMemberImports" value="false"/>
        </module>
        <!--含@ 的javadoc 必须多行，不含则可一行显示-->
        <module name="SingleLineJavadoc">
            <property name="severity" value="warning"/>
        </module>
        <!-- 检查是否从非法的包中导入了类 illegalPkgs: 定义非法的包名称-->
        <module name="IllegalImport">
            <property name="severity" value="error"/>
        </module>
        <!-- 检查是否导入了不必显示导入的类-->
        <module name="RedundantImport">
            <property name="severity" value="error"/>
        </module>
        <!-- 检查是否导入的包没有使用-->
        <module name="UnusedImports">
            <property name="severity" value="error"/>
        </module>
        <!--检查 重写的 clone 方法是否调用了 super.clone()-->
        <module name="SuperClone">
            <property name="severity" value="info"/>
        </module>
        <!--检查 重写的 finalize 方法是否调用了 super.finalize()-->
        <module name="SuperFinalize">
            <property name="severity" value="error"/>
        </module>
        <!-- 方法长度 max default 150行 -->
        <module name="MethodLength"/>
        <!-- Checks the number of parameters of a method or constructor. max default 7个. -->
        <module name="ParameterNumber">
            <property name="max" value="10"/>
            <property name="severity" value="error"/>
            <property name="tokens" value="METHOD_DEF"/>
        </module>
        <!-- 每行字符数 -->
        <module name="LineLength">
            <property name="max" value="200"/>
            <property name="tabWidth" value="4"/>
            <property name="severity" value="error"/>
        </module>
        <module name="EmptyForIteratorPad"/>
        <!-- 方法名后跟左圆括号"(" -->
        <module name="MethodParamPad">
            <property name="severity" value="error"/>
        </module>
        <!-- 检查在某个特定关键字之后应保留空格 -->
        <module name="NoWhitespaceAfter">
            <property name="severity" value="error"/>
        </module>
        <!-- 检查在某个特定关键字之前应保留空格 -->
        <module name="NoWhitespaceBefore">
            <property name="severity" value="error"/>
        </module>
        <!-- 操作符换行策略检查 -->
        <module name="OperatorWrap">
            <property name="severity" value="error"/>
        </module>
        <!-- 圆括号空白 -->
        <module name="ParenPad"/>
        <!-- 在类型转换时，不允许左圆括号右边有空格，也不允许与右圆括号左边有空格 -->
        <module name="TypecastParenPad"/>
        <!-- 检查分隔符是否在空白之后 -->
        <module name="WhitespaceAfter">
            <property name="severity" value="error"/>
        </module>
        <!-- ModifierOrder 检查修饰符的顺序，默认是 public,protected,private,abstract,static,final,transient,volatile,synchronized,native -->
        <module name="ModifierOrder">
            <property name="severity" value="error"/>
        </module>
        <!-- 检查是否有多余的修饰符，例如：接口中的方法不必使用public、abstract修饰  -->
        <module name="RedundantModifier">
            <property name="severity" value="error"/>
        </module>
        <!--避免嵌套的代码块allowInSwitchCase  是允许switch-case中存在嵌套代码块-->
        <module name="AvoidNestedBlocks"/>
        <!--检查空白块option  选项 text，stmt     default stmt -->
        <module name="EmptyBlock">
            <property name="severity" value="error"/>
        </module>
        <!--检查 switch 语句 中 case 代码块是否包含 break, return, throw or continue-->
        <module name="FallThrough">
            <property name="severity" value="error"/>
        </module>
        <!--声明顺序检查 ，顺序
            1，类变量，实例变量：  public ——> protected ——>default ——>private
            2,类方法：  构造方法 ——>其他方法
        -->
        <module name="DeclarationOrder">
            <property name="severity" value="error"/>
        </module>
        <!--共变 equals 检查，重载 equals() 方法时 也必须重写 它-->
        <module name="CovariantEquals">
            <property name="severity" value="error"/>
        </module>
        <!--明确初始化检查-->
        <module name="ExplicitInitialization">
            <property name="severity" value="error"/>
        </module>
        <!--检查 { 存在的位置 option 选项 same,nl,nlow    defaule eol -->
        <module name="LeftCurly">
            <property name="severity" value="error"/>
        </module>
        <!--检查代码块是否需要 {} 如 if(){},while(){} -->
        <module name="NeedBraces">
            <property name="severity" value="error"/>
        </module>
        <!--使用 equals 时 避免出现null 如  str.equls("xx") 正确使用 "xx".equls(str) -->
        <module name="EqualsAvoidNull">
            <property name="severity" value="error"/>
        </module>
        <!--检查 } 存在的位置option 选项 eol,alone,alone_or_singleline    defaule same -->
        <module name="RightCurly">
            <property name="severity" value="error"/>
        </module>
        <module name="NoFinalizer">
            <property name="severity" value="error"/>
        </module>
        <!--空行检查  一行 ; -->
        <module name="EmptyStatement"/>
        <!--检查 重写equals方法时是否有重写hashCode方法-->
        <module name="EqualsHashCode"/>
        <!--检查不合法的实例 某些类有工厂方法来生成实例，比如 Boolean ，就不要 new -->
        <module name="IllegalInstantiation"/>
        <!--检查子表达式中是否有赋值语句, 检查繁重内部逻辑，比如 while ((line = bufferedReader.readLine()) != null) ，难以阅读的代码-->
        <module name="InnerAssignment"/>
        <!--检查switch 是否包含 default-->
        <module name="MissingSwitchDefault">
            <property name="severity" value="info"/>
        </module>
        <!--boolean 检查， 如 if (b == true), b || true, !false 糟糕代码-->
        <module name="SimplifyBooleanExpression">
            <property name="severity" value="error"/>
        </module>
        <!--boolean 返回值检查  如
            if (valid())
               return false;
            else
               return true;
        -->
        <module name="SimplifyBooleanReturn">
            <property name="severity" value="error"/>
        </module>
        <!--final 类检查，当类的构造方法为 private 时-->
        <module name="FinalClass">
            <property name="severity" value="error"/>
        </module>
        <!--工具类检查（只定义了静态方法的类），确保没有 public 构造方法-->
        <module name="HideUtilityClassConstructor">
            <property name="severity" value="error"/>
        </module>
        <!--内部接口检查，确保接口不是空的-->
        <module name="InterfaceIsType">
            <property name="severity" value="info"/>
        </module>
        <!--类成员访问控制检查-->
        <module name="VisibilityModifier">
            <property name="severity" value="error"/>
            <property name="protectedAllowed" value="true"/>
        </module>
        <!--@语句的顺序-->
        <module name="AtclauseOrder">
            <property name="severity" value="error"/>
        </module>
        <!--检查一个表达式中  &&, ||, &, | ， ^ 的最大允许个数-->
        <module name="BooleanExpressionComplexity">
            <property name="severity" value="error"/>
            <property name="max" value="8"/>
        </module>
        <!-- 检查数组类型定义的样式 -->
        <module name="ArrayTypeStyle">
            <property name="severity" value="error"/>
        </module>
        <module name="FinalParameters">
            <property name="severity" value="error"/>
            <property name="tokens" value="METHOD_DEF, CTOR_DEF, LITERAL_CATCH"/>
        </module>
        <!--检查 未使用或未改变的局部变量或参数 是否定义为 final-->
        <module name="FinalLocalVariable">
            <property name="severity" value="ignore"/>
            <property name="tokens" value="PARAMETER_DEF, VARIABLE_DEF"/>
            <property name="validateEnhancedForLoopVariable" value="true"/>
        </module>
        <module name="TodoComment">
            <property name="severity" value="error"/>
        </module>
        <!--异常类检查，确保异常类的只含有 final 成员-->
        <!--<module name="MutableException">
            <property name="severity" value="error"/>
        </module>
        -->
        <module name="UpperEll"/>
        <!--检查{@inheritDoc} javadoc存在时 @Override 注解是否存在
            javaFiveCompatibility 是否只检查 类，接口  default false
         -->
        <module name="MissingOverride">
            <property name="severity" value="error"/>
        </module>
        <!--检查@deprecated 注解与  @deprecated javaDoc是否同时存在
            skipNoJavadoc 没有javadoc跳过  defalult  false
        -->
        <module name="MissingDeprecated">
            <property name="severity" value="error"/>
        </module>

        <!-- Custom checks based on regular expressions -->
        <module name="RegexpSinglelineJava">
            <metadata name="net.sf.eclipsecs.core.comment" value="Parameteric log messages"/>
            <property name="severity" value="error"/>
            <property name="format" value="log\.\w+\(((\&quot;.+\&quot;\s*\+)|(.*\s*\+\s*\&quot;))"/>
            <property name="message"
                      value="Avoid string concatenation for constructing log messages. Use parametric messages instead"/>
        </module>
        <module name="RegexpSinglelineJava">
            <metadata name="net.sf.eclipsecs.core.comment" value="JavaDoc @version tag"/>
            <property name="severity" value="error"/>
            <property name="format" value="@version\s+(.+)*(\$Revision|\$Date)"/>
            <property name="message" value="Invalid JavaDoc @version tag."/>
        </module>
        <module name="RegexpSinglelineJava">
            <metadata name="net.sf.eclipsecs.core.comment" value="Logging framework selection"/>
            <property name="severity" value="error"/>
            <property name="format" value="LogFactory\.getLog"/>
            <property name="message" value="CAS uses the slf4j logging framework."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="id" value="sysOutConsoleLogs"/>
            <metadata name="net.sf.eclipsecs.core.comment" value="Console output messages"/>
            <property name="severity" value="error"/>
            <property name="format" value="System\.(out|err)"/>
            <property name="message"
                      value="Avoid sending messages to the console directly. Use a logger object instead"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="id" value="stackTraceConsoleLogs"/>
            <metadata name="net.sf.eclipsecs.core.comment" value="Printing stack traces to the console"/>
            <property name="severity" value="error"/>
            <property name="format" value="\.printStackTrace\(\)"/>
            <property name="message"
                      value="Avoid sending stack traces to the console directly. Use a logger object instead"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="id" value="junitTestMethodName"/>
            <metadata name="net.sf.eclipsecs.core.comment" value="Using 'test' prefix for JUnit Tests"/>
            <property name="severity" value="error"/>
            <property name="format" value="(public|protected)\s+void\s+test\w+\(.+\{$"/>
            <property name="message"
                      value="JUnit test methods should not begin with the 'test' prefix. Use annotations instead and/or rename the method"/>
        </module>
        <module name="RegexpSinglelineJava">
            <metadata name="net.sf.eclipsecs.core.comment" value="The logger object must be named &quot;logger&quot;"/>
            <property name="severity" value="error"/>
            <property name="format" value="\s+(static\s)*(final\s)*(static\s)*Logger\s+(log|LOG)\b"/>
            <property name="message"
                      value="The Logger object must only be called &quot;logger&quot; or &quot;LOGGER&quot;"/>
        </module>
        <module name="RegexpSinglelineJava">
            <metadata name="net.sf.eclipsecs.core.comment" value="Qualifying logger with the &quot;this&quot; keyword"/>
            <property name="severity" value="error"/>
            <property name="format" value="((this\.logger)|(super\.logger))\.\w+\("/>
            <property name="message" value="The Logger object need not be qualified with the &quot;this&quot; keyword"/>
        </module>
        <module name="RegexpSinglelineJava">
            <metadata name="net.sf.eclipsecs.core.comment" value="Using @Test instead of extending TestCase"/>
            <property name="severity" value="error"/>
            <property name="format" value="class\s+\w+\s+extends\s+(junit\.framework\.)*TestCase"/>
            <property name="message"
                      value="All testcase must use annotations (@Test) instead of extending junit.framework.TestCase"/>
        </module>
        <module name="RegexpSinglelineJava">
            <metadata name="net.sf.eclipsecs.core.comment" value="Using the junit.framework package"/>
            <property name="severity" value="error"/>
            <property name="format" value="junit.framework"/>
            <property name="message" value="The package junit.framework belongs to JUnit v3. Use org.junit instead."/>
        </module>
        <module name="RegexpSinglelineJava">
            <metadata name="net.sf.eclipsecs.core.comment" value="Checking for logging level"/>
            <property name="severity" value="warning"/>
            <property name="format" value="log\.is\w+Enabled\("/>
            <property name="message"
                      value="If the construction of the log message is cheap, consider not checking for logging levels."/>
        </module>
        <!--
        <module name="RegexpSinglelineJava">
            <metadata name="net.sf.eclipsecs.core.comment" value="Non-static inner class"/>
            <property name="severity" value="error"/>
            <property name="format" value="\s+(private|public|protected)*\s+(abstract\s)*class\s+\w+"/>
            <property name="message"
                      value="Non-static nested classes are a security compromise. Consider using a static class instead"/>
        </module>
        -->
    </module>

    <!-- Checker module checks -->
    <module name="UniqueProperties">
        <property name="severity" value="error"/>
    </module>
    <module name="NewlineAtEndOfFile">
        <property name="fileExtensions" value="java, xml, properties, txt"/>
        <property name="lineSeparator" value="lf"/>
        <property name="severity" value="error"/>
    </module>
    <module name="Translation">
        <property name="severity" value="ignore"/>
    </module>
    <!-- 文件长度不超过3000行 -->   
    <module name="FileLength">   
        <property name="max" value="3000" />   
    </module>   
    
    <!-- tab制表符 -->
    <module name="FileTabCharacter">
        <property name="severity" value="error"/>
    </module>

    <!-- Custom checks based on regular expressions -->
    <module name="RegexpSingleline">
        <metadata name="net.sf.eclipsecs.core.comment" value="Trailing spaces"/>
        <property name="severity" value="error"/>
        <property name="format" value="\s+$"/>
        <property name="message" value="Line has trailing spaces."/>
    </module>
    <!--
    <module name="RegexpSingleline">
        <metadata name="net.sf.eclipsecs.core.comment" value="Space instead of tabs"/>
        <property name="severity" value="error"/>
        <property name="format" value="^\t+"/>
        <property name="message" value="Tabs should never be used for indentation. Use spaces instead"/>
    </module>
    -->
    <module name="RegexpSingleline">
        <metadata name="net.sf.eclipsecs.core.comment" value="Space after cast"/>
        <property name="severity" value="error"/>
        <property name="format" value="\(\w+\)\w+"/>
        <property name="message" value="There are no spaces after cast."/>
    </module>
    <module name="RegexpSingleline">
        <metadata name="net.sf.eclipsecs.core.comment" value="Usage of java.util.Random"/>
        <property name="severity" value="error"/>
        <property name="format" value="(java.util.Random)|(new Random\()"/>
        <property name="message" value="For security purposes, use 'java.security.SecureRandom' instead"/>
    </module>
    <module name="RegexpSingleline">
        <metadata name="net.sf.eclipsecs.core.comment" value="final clone() method"/>
        <property name="severity" value="error"/>
        <property name="format" value="public\s+\w+\s+clone\(\)"/>
        <property name="message"
                  value="Consider marking the clone() method as final to reduce chances of data corruption"/>
    </module>
    <module name="RegexpSingleline">
        <metadata name="net.sf.eclipsecs.core.comment" value="JUnit Assert static import"/>
        <property name="severity" value="error"/>
        <property name="format" value="import\s+static\s+org\.junit\.Assert\.\w+"/>
        <property name="message" value="JUnit Assert methods MUST be imported statically with a *"/>
    </module>
    <module name="RegexpSingleline">
        <metadata name="net.sf.eclipsecs.core.comment" value="Mockito static import"/>
        <property name="severity" value="error"/>
        <property name="format" value="import\s+static\s+org\.mockito\.Mockito\.\w+"/>
        <property name="message" value="Mockito methods MUST be imported statically with a *"/>
    </module>
    <module name="RegexpSingleline">
        <metadata name="net.sf.eclipsecs.core.comment" value="Missing @since tag"/>
        <property name="severity" value="error"/>
        <property name="format" value="\s+\*+\s+@since\s+\d+\.\d+.*"/>
        <property name="maximum" value="200"/>
        <property name="minimum" value="1"/>
        <property name="fileExtensions" value="java,groovy"/>
        <property name="message" value="There are no @since tags defined for this component's Javadocs."/>
    </module>
    <!-- <module name="RegexpSingleline">
        <metadata name="net.sf.eclipsecs.core.comment" value="Before space"/>
        <property name="severity" value="error"/>
        <property name="format" value="\w+\{|\)\{"/>
        <property name="message" value="'{' 前应有空格"/>
    </module> -->
    <module name="RegexpSingleline">
        <metadata name="net.sf.eclipsecs.core.comment" value="Before multi space"/>
        <property name="severity" value="error"/>
        <property name="format" value="\w+\s{2,}\{|\)\s{2,}\{"/>
        <property name="message" value="'{' 前仅能有一个空格"/>
    </module>
    <module name="RegexpSingleline">
        <metadata name="net.sf.eclipsecs.core.comment" value="if after multi space"/>
        <property name="severity" value="error"/>
        <property name="format" value="if\s{2,}\("/>
        <property name="message" value="'if' 后仅能有一个空格"/>
    </module>
    <module name="RegexpSingleline">
        <metadata name="net.sf.eclipsecs.core.comment" value="For after space"/>
        <property name="severity" value="error"/>
        <property name="format" value="for\("/>
        <property name="message" value="'for' 后应有空格"/>
    </module>
    <module name="RegexpSingleline">
        <metadata name="net.sf.eclipsecs.core.comment" value="For after multi space"/>
        <property name="severity" value="error"/>
        <property name="format" value="for\s{2,}\("/>
        <property name="message" value="'for' 后仅能有一个空格"/>
    </module>
    <module name="RegexpSingleline">
        <metadata name="net.sf.eclipsecs.core.comment" value="While after space"/>
        <property name="severity" value="error"/>
        <property name="format" value="while\("/>
        <property name="message" value="'while' 后应有空格"/>
    </module>
    <module name="RegexpSingleline">
        <metadata name="net.sf.eclipsecs.core.comment" value="While after multi space"/>
        <property name="severity" value="error"/>
        <property name="format" value="while\s{2,}\("/>
        <property name="message" value="'while' 后仅能有一个空格"/>
    </module>
    <!-- 支持使用suppressions.xml配置过滤掉checkstyle检查 -->
    <module name="SuppressionFilter">
        <property name="file" value="${checkstyle.suppressions.file}"/>
    </module>
    <!-- 支持使用@SuppressWarnings()注解来过滤掉checkstyle检查 -->
    <module name="SuppressWarningsFilter"/>
    
    <!-- 正则检查文件是否以指定文件开始,这里最好是放一些版权信息和工程描述  -->
    <!-- <module name="RegexpHeader">
        <property name="headerFile" value="${checkstyle.regexp.header.file}"/>
        <property name="fileExtensions" value="java"/>
    </module>
    -->
    <!-- 正则检查文件是否以指定文件开始,这里最好是放一些版权信息和工程描述  -->
    <!-- <module name="Header">
    	<property name="severity" value="error"/>
        <property name="headerFile" value="${checkstyle.header.file}"/>
        <property name="fileExtensions" value="java"/>
    </module>  -->
</module>
